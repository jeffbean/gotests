// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x6a\xc3\x40\x0c\x45\xaf\x22\x8c\x17\x2d\x18\x1d\xa0\xd0\x03\x78\x53\x4a\x5b\xda\xb5\x18\xcb\xae\xc0\x9e\x16\x8d\x92\x10\x84\xee\x1e\xc6\x38\x99\xd5\x87\x3f\x6f\xde\x97\xfb\xc4\xb3\x64\x86\x2e\xd1\xba\x76\x11\xee\x17\xb1\x5f\xc0\x0f\x4e\x2c\x67\xd6\xda\xc8\x0c\xf9\xcf\x00\xc7\xf2\x69\x7a\x4a\x16\x61\x86\xee\x9c\xa7\xfa\x7a\x27\x01\x23\x5a\x8b\x6f\xb4\x71\xc4\x93\xbb\x52\x5e\x18\x7a\x19\xa0\xe7\x15\x5e\x5e\x01\xdf\x49\x69\x63\x63\x2d\x87\xbd\x97\x88\x01\x1e\x7f\xdb\xde\x8f\x8a\xd5\x1b\xcc\x90\x74\x29\x4d\xbf\x2b\xea\xe2\x4e\xe3\xd7\xf5\x9f\x71\x2c\xdf\xa4\x42\x93\xa4\x08\xc4\xc6\xee\xf1\x7c\xe4\x2d\x00\x00\xff\xff\x65\x08\xbc\x88\xf1\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1518062774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x4d\x6f\xd3\x40\x10\x86\xcf\xf6\xaf\x18\xa2\xaa\x4a\x50\xd8\xde\x23\xf5\x00\xa2\x20\x2e\x0d\x4a\x2b\x7a\x40\x08\x6d\xe3\xd9\xb0\xc2\xd9\x84\xdd\x31\x55\xb4\xda\xff\x8e\xf6\xc3\xdf\x76\x45\x0f\x8d\x3d\xf6\xcc\xbc\x7e\xe6\x9d\xb5\xb6\x40\x21\x15\xc2\x42\x54\x6a\x4f\xf2\xa4\x16\xce\xe5\xd6\xbe\x83\x2b\x01\x9b\x5b\x60\xce\xe5\xb9\x7f\x04\xd6\xb2\x47\x34\x74\xcf\x8f\xe8\xdc\x92\xe0\x2d\xa1\x21\xa9\x0e\xec\x71\x05\x36\xcf\x7c\xca\x8b\xa4\x5f\xc0\x76\xb8\x47\xf9\x17\xb5\x73\x79\x16\xc2\x52\x00\xfb\x62\x1e\x48\x57\x7b\x0a\xc1\x26\xfa\x49\x62\x59\x98\x18\xcb\xe8\x72\x46\x10\x21\x02\x26\xbc\xec\xeb\xa6\xb7\x35\x57\x07\x1c\x24\x64\xd6\x86\x7b\x2f\x32\xc8\xbb\x9c\x31\x3d\xf2\x29\xa8\x8a\x74\xd7\xf4\xac\x43\x9d\xeb\xc1\xa5\x57\xe5\x3f\xf3\x2b\xd7\xfc\x88\x84\x3a\x34\x0b\xd2\xb8\x3e\xf4\x84\x75\x64\x8d\x33\x42\xc3\x10\x1a\xa9\xeb\x74\xec\xf7\xf7\x40\x8d\x87\xfe\xfd\x47\xa7\xcd\xd1\x1c\x7c\x57\xa9\x0e\x29\x77\x82\x72\x2d\x9d\xab\xa2\x45\x3d\xa0\x95\xc8\xc6\x9f\x06\x48\x69\x5a\x64\x75\xc9\x31\xcf\x19\x76\xaf\x10\xcb\xb2\x80\xcb\xff\x9b\xc8\xe9\x60\xdb\xa1\xa9\x4a\x32\x75\x9f\x27\xae\xe8\x35\x62\x4d\xcb\x1d\x52\xa5\x95\xb9\xd3\xfa\x94\x18\xbc\x70\x45\x77\x5a\xf7\x61\xd5\xa0\x3d\xc9\x9b\x1b\x78\xdc\x7e\xdc\x6e\xe0\x7d\x51\x80\x87\x0d\x7b\x6e\xd0\xb0\x30\x07\x71\xd2\x60\xad\x14\xa0\x4e\xe4\x19\xde\xf3\xdf\x58\x38\x07\x3f\xd7\x40\xe4\x87\x62\x6d\xa8\x95\xb4\xc7\x59\xd9\x1c\xd2\x1f\xb1\x5d\xa5\x96\x44\xec\x68\x0e\x6b\xf0\x0b\x33\x5e\x91\xf9\xf1\xcd\xac\xc9\x68\x28\x41\x46\x00\x7e\x39\x63\x78\x99\x6b\xe7\xae\x93\xb4\x84\x8c\x7d\xe3\x65\x85\xce\xd9\xba\xc4\xcc\xf6\x64\xd6\xb2\xb8\xcd\x1b\x20\x62\xd1\x18\xac\xb3\x53\xeb\xb6\x40\xbb\x4b\xd9\xc4\x82\x8d\x6e\x52\xbf\x89\x95\xa8\x3f\xf3\x49\x4b\x6a\xbe\xbe\xb7\x2a\x9b\x5b\xb8\x7e\xbe\x10\x1a\xf6\xa1\x12\x02\xb5\xfd\x9f\x86\xc9\xfb\xcb\x30\xbc\xad\x2a\x2f\x5d\x7b\xac\xc6\xf1\xad\xc2\x40\x69\x05\x8d\x32\xc2\xe3\xb9\xe4\x84\xb0\xd0\xd1\x92\x0b\xb8\x12\xc1\x88\xed\x93\x3d\x2f\xcb\x18\x9e\x53\x31\xe1\xcb\x2c\x8e\x6c\xa8\xca\x39\xd4\x3a\x4e\x74\xaa\x41\xed\xb7\x50\x41\x0a\x3f\xa1\xda\xe0\x6f\x6e\x61\xb1\x48\x67\x63\xc6\x8d\x41\x4d\xec\xee\x4f\xc5\xcb\x50\x77\x49\x6b\x40\xad\xd7\x9d\x8c\x55\x3b\xc8\x7a\x5b\x7b\x6b\xd7\x68\x7c\xa8\x9e\xa3\xb1\x9d\xd3\x41\xaa\xb5\xf1\x84\xd8\x9f\x14\x49\x55\x61\x57\xd4\xe8\x90\x7d\xcd\x0a\xe3\x9e\xf3\x5e\xf8\x7c\xa2\xd6\xed\x8d\x31\xd8\x43\xd8\xeb\xe5\xaa\xb5\x43\x7b\x78\x45\xfd\x57\x62\x6a\xc6\x7e\x31\x7a\x25\x5b\xdc\x52\x95\x52\xe1\x04\xf0\x81\xe7\xbb\x90\x3d\x5f\x22\xd6\x1e\x55\x6b\x68\xea\xaf\x86\x08\x7c\xc4\xe5\x2e\xcf\xeb\xe2\xff\x02\x00\x00\xff\xff\xca\xb3\xa7\x0e\x70\x07\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 1904, mode: os.FileMode(420), modTime: time.Unix(1518067533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\xc1\x0a\xc2\x30\x10\x04\xd0\x7b\xbe\x62\xc9\x49\x2f\xe9\x47\x78\xf2\x22\xfe\xc2\xda\x4e\x9b\x20\x49\xcb\x66\x3d\xc8\xb2\xff\x2e\xb4\xa0\xde\x86\x19\xde\x98\x4d\x98\x4b\x03\xc5\x0c\x9e\x20\xd1\x3d\x98\x09\xb7\x05\x94\x2e\x6b\xad\x68\xda\xdd\xcd\xd2\x3e\xa0\x4d\xee\x61\xe3\xf1\xc9\x0b\xc8\x2c\xdd\x8f\xe8\x1e\x42\xa9\xdb\x2a\x4a\xa7\x9f\xbf\xee\xcd\xc1\x6f\x5c\xe1\x7e\x10\xcd\x7f\x67\x44\x44\x71\x29\x9a\x5f\x8f\x34\xae\x75\xe8\x2a\xd0\x31\xcb\xa0\xe8\x5a\xe6\xf7\xc0\xbd\x43\x34\x86\xf3\x97\x7c\x02\x00\x00\xff\xff\x8f\x38\x71\x17\xb5\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 181, mode: os.FileMode(420), modTime: time.Unix(1518064726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\xc9\xcc\x4b\x55\xaa\xad\x55\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4e\xcc\xc9\x51\x52\xd0\x03\x8b\xa6\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1518062774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0a\x02\x41\x0c\x45\xaf\x12\x96\x2d\x25\x07\x10\x3c\x80\x9d\xe0\x09\x46\x36\x33\x4c\xb1\x51\x92\x6c\xf5\xc9\xdd\x65\x46\x8b\xad\x12\x1e\xff\xbf\x0f\x6c\x52\xbb\x0a\x2d\x5d\x3f\x47\xf8\x92\x09\xac\x95\xae\x37\xe2\xf1\xf6\x4a\xfa\x0e\xe2\xe7\xf1\x0a\xf1\xf0\xcc\x08\xde\xbd\x5d\x08\x10\xdd\xfe\x91\xb5\xf2\xc3\xba\xc6\x7d\x3a\x06\xb4\xa2\x4d\x26\x2f\x56\x76\x09\xb1\x5f\xb5\x58\x73\x06\x26\x1d\x0b\x27\xcf\xf9\x7c\x03\x00\x00\xff\xff\xde\x67\x77\xb6\x97\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 151, mode: os.FileMode(420), modTime: time.Unix(1518065601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\xe1\x6a\x83\x40\x10\x84\xff\xfb\x14\x8b\x28\xb4\xa0\xfb\x00\x85\x3e\x40\xff\x14\x69\x4b\xff\x5f\xe2\x68\x16\xf4\x62\xee\x4e\x43\x58\xf6\xdd\x83\x07\xf1\xd7\x0c\x33\xc3\x37\xaa\x3d\x06\xf1\xa0\x72\x46\x8c\x6e\x44\x49\xad\x59\xa1\x2a\x03\xf9\x6b\x22\xfe\x5d\x4f\x09\x31\x45\xb3\xfa\xc6\xa4\x0a\xdf\x9b\xa9\xde\x25\x5d\x88\x7f\x70\x86\x6c\x08\x7b\xc2\x7f\x8f\x05\xfc\xef\xa6\x15\x66\x7c\x0c\xf9\xdb\xcd\x30\x7b\xcb\x44\xee\x82\xf8\xf4\xe5\x97\x75\x07\xaa\x06\xe7\x47\x50\x25\x0d\x55\x98\xe8\xe3\x93\xb8\x73\xc1\xcd\x48\x08\xb9\x97\x81\x2a\x31\x6b\x5e\xbf\xf5\x76\x70\xb3\xbc\x17\xaa\x2d\x65\xfb\x0c\x00\x00\xff\xff\x90\x2e\xb9\x52\xc9\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 201, mode: os.FileMode(420), modTime: time.Unix(1518062774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x4d\x0a\xc2\x40\x0c\x85\xaf\xf2\x28\xb3\x2c\x3d\x80\xe0\x52\xdc\x7b\x03\xa1\x19\x09\x94\x0c\xbc\x99\xae\x42\xee\x2e\xa9\x45\xc1\x55\x7e\xbe\x2f\x79\xee\xab\x54\x35\xc1\x44\xe9\xfb\x36\xfa\x14\x01\x77\x3e\xed\x25\x28\x3a\xa3\xc8\x86\xcb\x15\xcb\xe3\x83\x23\xdc\xb5\xa2\x68\xc4\x0c\x77\xb1\x35\x37\xf7\x36\xb0\x64\x73\xce\x5a\xf3\x60\xec\xb4\x7e\x23\x1b\x53\x16\xf2\xe4\x38\x84\xc6\xef\xd3\x7f\x39\x03\x7f\xee\x51\xdf\x01\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1518062774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

